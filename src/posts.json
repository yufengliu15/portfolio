[{"id":1719028800,"title":"about-the-website","user_title":"About The Website","published":"June 22, 2024","updated":null,"content":"\nWelcome to my little corner on the internet! This website was made with the intention of putting my name out there into the world. I got into web development back in February of 2024, simply because I liked being able to easily showcase my work to others. \n\nI was looking around for website ideas at the time and I noticed many students were either using templates, or trying to sell themselves as a product. It was then that I realized the websites that spoke to me were the ones that had their **own identity**. \n\nMaking my website have it's own personality was the main objective in mind, and I like to think I did a good job at it. *I'm not a designer after all*\n\nWith that said, I also want to talk about how I even created this website, since I spent way too much time on it and had lots of hurdles. *Let me flex a little*\n## Home Page\nMy first and easiest page on the site. \n### Intro Image\nThe hardest part was figuring out how to correctly place the image, without making it too tall so that users would not have to scroll as far to reach the main content. This was mostly trial and error.\n\nAs well, I was thinking about structuring the white box and intro text as HTML and CSS, however I noticed some issues with how it reacted to page resizing. In the end, I decided to make my life simple and simply photoshopped it onto the image, so it's one whole entity. \n\nAfter I was happy with the result, I converted the images to .webp in order to save performance. \n\n### Font\nI really wanted to use a monospace font, since it just looks so clean. So I settled with **Iosevka**, where it provided a good base font for me to customize. Importing it into a website was harder than it seemed. I had to:\n- Convert to TTF, WOFF and WOFF2\n- Deal with relative links to be able to import the font properly\n- Configure the correct CSS to properly display it\n\n## Gallery Page\nMy second and most difficult page on the site. I remember looking at someone else's personal website, and needing to click on a link to go to their gallery. I thought that it was uncomfortable as a user, so I wanted to be able to display all my photos at a glance. If the user wished to see more details, then they could simply click on the image to the original photo displayed. \n\n### Google Photos API\nOriginally the plan was to use Google Photos API, since I plan to store all my photos on there anyways. At the time, I noticed a lack of resources on this, so I had to deal with Google's godawful documentation. \n\nI was luckily able to find a repo from a Google Dev, who created a project similar to what I had in mind, however his required the client to log in to Google. Obviously this wouldn't work for my use case, but I decided to see if I could reverse engineer it to fit my needs. For that, I needed to create a Service Account.\n#### Access Token\nThe next issue I ran into was needing to generate an access token. The Google Dev was able to create one since he had a user login, so I had to figure out how to generate an access token from a service account. \n\nThe JWT (JSON Web Token) requires a specific format:\n```javascript\nconst JWT = {\n\theader: i_am_a_header,\n\tpayload: i_am_a_payload,\n\tsignature: i_am_a_signature, \n}\n```\nI was given the header and the payload, however for the life of me I could not figure out what the signature is. Every forum I came across just used a function from a library, which I could not do since the library was built for Node.js and would not work on a pure front end client. \n\nAfter days of digging around I saw one Stack Overflow post that had the exact issue as me, and provided a detailed step by step on how to generate a proper token. *I will never forget you, Stack Overflow guy*\n\n#### Pitfall\nAfter generating a correct token (which I verified using [AdvancedRESTClient](https://www.advancedrestclient.com/)), Google Photos API still sent back an error. As a hail mary, I decided to search up \"Google Photos API Service Accounts\". Turns out, Google Photos API does not support service accounts. So I essentially was **trying to accomplish an impossible task**. \n\n### Google Drive API\nAfter that setback, I decided to switch to querying from Google Drive. While slightly less optimal, I was too stubborn to switch to an entirely different \"database\". \n\n#### GAPI (Google API)\nMost of Google's API's required a back-end environment, which would have been useless to me, since Github Pages cannot allow for back-end. It was then that I stumbled across GAPI, a pure front-end API. \n\nDocumentation was lack-luster as expected, so I was on my own trying to figure out how to properly initialize certain things. \n\n#### Styling\nAfter successfully retrieving the images, all that was left was to style the images properly. This is where I \"borrowed\" from the Google Dev's Repo. Work smarter, not harder.\n## Learning Page\nMy last and relatively easier page. \n\n### Markdown\nI wanted to be able to create blog posts in Markdown, since that is the format of the note taking app I use, [Obsidian](https://obsidian.md/). This way I can simply write my thoughts in Obsidian, then drag and drop into a folder on my website. \n\nI was able to follow a couple Youtube Videos with ease, and was quickly able to get the Markdown parser working.\n\n### Dynamic Routing\nDynamic routing is where pages are dynamically created. This way, I would not have to manually create a new link every time I upload a new post. \n\nThis was pretty straightforward, and whenever I had trouble I used Bing Copilot to check for debugging ideas. \n\n### Styling\nAs you may have noticed, the styling for the posts is a little different compared to the rest of the website. At first I was not planning on having a background colour, however I noticed that it felt **boring** to read a black text with a yellow background. So, I decided to go with a similar look to how my Obsidian notes look.  "}]